open Octane.Schema4

let () =
  Format.printf "Hello, World!@.";
  Format.printf "Request:@.%s@.@." (build_request from_user);
  Format.printf "Request:@.%s@.@." (build_request selected);
  Format.printf "Request:@.%s@.@." (build_request selected_joined);
  ()
;;

(* let () = print_endline "Hello, World!" *)
(**)
(* type t = *)
(*   { twitch_user_id : string [@primary] *)
(*   ; twitch_display_name : string *)
(*   ; twitch_profile_url : string option [@default None] *)
(*   } *)
(* (* [@@deriving combust ~name:"users"] *) *)
(**)
(* module MySchema = struct *)
(*   open Octane.Schema *)
(**)
(*   let table, columns = assert false *)
(*   (* create_table "users" `users (fun table -> *) *)
(*   (*   Octane.Type. *) *)
(*   (*     [ column ~primary_key:true table "twitch_user_id" int *) *)
(*   (*     ; column table "twitch_display_name" text *) *)
(*   (*     ; column table "twitch_profile_url" (null text) *) *)
(*   (*     ]) *) *)
(* end *)
(**)
(* module Query = struct *)
(*   let find_one db = *)
(*     (* Octane.query | SELECT { ... } *) *)
(*     (* "select twitch_user_id, twitch_display_name, twitch_profile_url from users" *) *)
(*     let select = Octane.Query.select ~table:MySchema.table MySchema.columns in *)
(*     (* Octane.request | ('a, [`One]) *) *)
(*     let request = Octane.Request.make_one select in *)
(*     (* ('a, error) result *) *)
(*     (* Expr.t *) *)
(*     let result = Octane.Db.find request db in *)
(*     (* TODO: Could do find_map, find_opt, etc. that could be really helpful *) *)
(*     let _ = result in *)
(*     (* let filter_value = *) *)
(*     (*   Expr.( *) *)
(*     (*     Fields.twitch_id = string twitch_id *) *)
(*     (*     && Fields.twitch_display_name = string "teej_dv") *) *)
(*     (* in *) *)
(*     () *)
(*   ;; *)
(* end *)
(**)
(* open Octane *)
(**)
(* let () = *)
(*   let other_columns = Schema.[ column "foo" text ] in *)
(*   let select = Query.select ~table:MySchema.table other_columns in *)
(*   Format.printf "%a@." Octane.Query.pp_query select; *)
(*   Format.printf "@.NOW WITH LIMIT:@."; *)
(*   let select = Query.limit ~limit:10 select in *)
(*   Format.printf "%a@." Octane.Query.pp_query select *)
(* ;; *)
